    - Loading one Template to Another Template without refreshing the whole
      web page called as Single Page Application.

    - Loading one template to another template in single page application called as
      Routing.

    - We Can implement the Routing in Single Page Application by using following
      modules

        1. ngRoute

        2. ui.router


Steps to Create the Single Page Application by using ngRoute Module:
--------------------------------------------------------------------

Step 1:
    Download ngRoute module

bower.json
----------
{
    "name":"nareshit",
    "dependencies":{
        "angular":"~1.5.0",
        "angular-route":"~1.5.0"
    }
}

[Note : "angular-route" is the bower key used to download the "ngRoute" module
        dependency file]

[Note : "angular-route.min.js" file acting as ngRoute Module Dependency file]


Step 2:
    add the ngRoute Dependency

app.js
------
var app = angular.module("app",["ngRoute"]);

Step 3:
    create the target templates

-----------
templates
    page_one.html
    page_two.html
------------

Step 4:
    create the target controllers

-------------
controllers
    page_one.js
    page_two.js
-------------


Step 5:
    implement the Mapping in single page application.


Rules:
1. mapping should be in config phase

Ex.
    app.config(config);
    function config($routeProvider){
        //mapping implementation
    }

2. mapping should be in the form of a "key&value" pairs

    - keys are user defined keys

    Ex.
        /page_one
        /page_two

     - values are JSON Objects with following JSON Keys

        1. templateUrl
        2. controller

config.js
---------
app.config(config);

function config($routeProvider){

     $routeProvider .when("/page_one",{templateUrl:"templates/page_one.html",controller:"page_one"})
                    .when("/page_two",{templateUrl:"templates/page_two.html",controller:"page_two"})
                    .otherwise("/page_one",{templateUrl:"templates/page_one.html",controller:"page_one"});


}


Step 6:
    create the source template

index.html
----------
<html ng-app="app">
    <a href="#page_one"><b>Page_One</b></a>
    <a href="#page_two"><b>Page_One</b></a>

    <div ng-view></div>

</html>


Passing the URL Parameters by using ngRoute Module
---------------------------------------------------

index.html
----------
<a href="#page_one/111/hello/50000">Page_One</a>

config.js
---------
$routeProvider.when("/page_one/:param1/:param2/:param3",{
    templateUrl:"templates/page_one.html",
    controller:"page_one"
});

page_one.js
-----------
app.controller("page_one",page_one);
function page_one($scope,$routeParams){
    console.log($routeParams.param1);   //111
    console.log($routeParams.param2);   //hello
    console.log($routeParams.param3);   //50000
}

Single Page Applications by using ui.router module:
---------------------------------------------------
    - ui.router module is the 3rd party module to implement the routing in
      single page applications

    - by using ui.router module we can implement the Nested Routing.

    - by using ui.router module we can implement the Named Views.

    - by using ui.router module we can pass JSON Object as the URL Parameter.


Steps to create the Basic Single Page Application by using ui.router module:
----------------------------------------------------------------------------
Step 1:
    download ui.router module

[Note : "angular-ui-router" is the bower key used to download the ui.router module
         dependency file]

[Note : angular-ui-router.min.js file acting as ui.router module dependency]


Step 2:
    add the ui.router module dependency

app.js
------
var app = angular.module("app",["ui.router"]);

Step 3:
    create the templates

--------------
templates
    page_one.html
    page_two.html
---------------

Step 4:
    create the controllers

------------
controllers
    page_one.js
    page_two.js
------------

Step 5:
    Implement the Mapping

config.js
---------
app.config(config);
function config($stateProvider,$urlRouterProvider){
    $stateProvider.state("page_one",{url:"/page_one",
                                     templateUrl:"templates/page_one.html",
                                     controller:"page_one"})
                    .state("page_two",{url:"/page_two",
                                       templateUrl:"templates/page_two.html",
                                       controller:"page_two"});
    $urlRouterProvider.otherwise("/page_one");
}

Step 6:
    create the source template

index.html
----------
<html ng-app="app">
    <a ui-sref="page_one">Page_One</a>
    <a ui-sref="page_two">Page_One</a>

    <div ui-view></div>
</html>

Passing the JSON Objects as URL Parameter in ui.router module
--------------------------------------------------------------
index.html
----------
<a ui-sref="page_one({"eid":1,"ename":"Hello_1","eage":20})">Page_one</a>

config.js
---------
$stateProvider.state("page_one",{
    url:"/page_one/:eid/:ename/:eage",
    templateUrl:"templates/page_one.html",
    controller:"page_one"
});

page_one.js
-----------

app.controller("page_one",page_one);
function page_one($scope,$stateParams){
    console.log($stateParams.eid);
    console.log($stateParams.ename);
    console.log($stateParams.eage);
}

----------------------------------
NestedRouting_uiRouter
        templates
            page_one.html
            page_two.html
            child_one.html
            child_two.html
        controllers
            page_one.js
            page_two.js
            child_one.js
            child_two.js
        app.js
        index.html
        config.js
        bower.json
-------------------------------------
page_one.html
-------------
<h1>{{var_one}}</h1>
<a ui-sref=".child_one">Child_One</a>
<div ui-view></div>

page_two.html
-------------
<h1>{{var_two}}</h1>
<a ui-sref=".child_two">Child_Two</a>
<div ui-view></div>

child_one.html
--------------
<h2>{{var_three}}</h2>

child_two.html
--------------
<h2>{{var_four}}</h2>


config.js
---------
$stateProvider.state("page_one",{
    url:"/page_one",
    templateUrl:"templates/page_one.html",
    controller:"page_one"
})
.state("page_one.child_one",{
    url:"/child_one",
    templateUrl:"templates/child_one.html",
    controller:"child_one"
})
.state("page_two",{
    url:"/page_two",
    templateUrl:"templates/page_two.html",
    controller:"page_two"
})
.state("page_two.child_two",{
    url:"/child_two",
    templateUrl:"templates/child_two.html",
    controller:"child_two"
});


Named Views in Single Page Application by using ui.router module:
-----------------------------------------------------------------

templates
    page_one.html
    page_two.html
    calc.html
    summary.html

page_one.html
-------------
<h1>{{var_one}}</h1>
<div ui-view="calc"></div>
<div ui-view="summary"></div>


controllers
    page_one.js
    page_two.js
    calc.js
    summary.js

config.js
---------
$stateProvider.state("page_one",{
    url:"/page_one",
    views:{
        '':{
            templateUrl:"templates/page_one.html",
            controller:"page_one"
        }
        'calc@page_one':{
            templateUrl:"templates/calc.html",
            controller:"calc"
        },
        'summary@page_one':{
            templateUrl:"templates/summary.html",
            controller:"summary"
        }
    }

});












